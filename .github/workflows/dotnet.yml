# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BUILD & RUN TESTS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  
env:
  AUDIT_NET_AZUREDOCDBAUTHKEY: ${{ secrets.AUDIT_NET_AZUREDOCDBAUTHKEY }}
  AUDIT_NET_AZUREDOCDBURL: ${{ secrets.AUDIT_NET_AZUREDOCDBURL }}
  AUDIT_NET_AZURETABLECNNSTRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
  AUDIT_NET_AZUREBLOBSERVICEURL: ${{ secrets.AUDIT_NET_AZUREBLOBSERVICEURL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build_and_test:
    runs-on: windows-latest

    steps:
       
    - name: Checkout
      uses: actions/checkout@v3

    - name: Start Azurite
      id: azurite
      uses: potatoqualitee/azuright@v1
      with:
        version: latest

    - name: Export Azurite environment variables
      shell: pwsh
      run: |
        # 1. Capture the raw connection string
        $conn = '${{ steps.azurite.outputs.connstring }}'

        # 2. Persist the full connection string
        "AUDIT_NET_AZUREBLOBCNNSTRING=$conn" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

        # 3. Split and extract AccountName and AccountKey
        $parts = $conn -split ';'
        $name  = ($parts | Where-Object { $_ -like 'AccountName=*' }) -replace 'AccountName=', ''
        $key   = ($parts | Where-Object { $_ -like 'AccountKey=*'  }) -replace 'AccountKey=', ''

        # 4. Persist each extracted value
        "AUDIT_NET_AZUREBLOBACCOUNTNAME=$name" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        "AUDIT_NET_AZUREBLOBACCOUNTKEY=$key"   | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Display Azurite variables
      run: |
        echo "AUDIT_NET_AZUREBLOBACCOUNTNAME = $Env:AUDIT_NET_AZUREBLOBACCOUNTNAME"
        echo "AUDIT_NET_AZUREBLOBACCOUNTKEY = $Env:AUDIT_NET_AZUREBLOBACCOUNTKEY"
        echo "AUDIT_NET_AZUREBLOBCNNSTRING = $Env:AUDIT_NET_AZUREBLOBCNNSTRING"
        echo "AUDIT_NET_AZURETABLECNNSTRING = $Env:AUDIT_NET_AZURETABLECNNSTRING"
      shell: pwsh

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          2.1.x
          3.1.x
          6.0.x
          7.0.x 
          8.0.x
          9.0.x
                
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'      
      with:
        nuget-version: '6.x'      

    - name: Install Required Tools
      run: |
        dotnet new tool-manifest
        dotnet tool install dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-sonarscanner --version 10.1.2

    - name: SonarScanner Begin
      shell: pwsh
      run: |
        & dotnet sonarscanner begin `
          /o:"thepirat000" `
          /k:"Audit.NET" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.login="$Env:SONAR_TOKEN" `
          /d:sonar.cs.vstest.reportsPaths="/test/TestResult/**/*.trx" `
          /d:sonar.cs.opencover.reportsPaths="/test/TestResult/**/*.opencover.xml" `
          /d:sonar.exclusions="**/templates/**,**/docs/**,**/documents/**,**/tools/**,**/packages/**,**/Tests/**" `
          /d:sonar.coverage.exclusions="**/templates/**,**/Tests/**"

    - name: Install SQL Server
      uses: Particular/install-sql-server-action@v1.0.0
      with:
        connection-string-env-var: SQL_SERVER_CONNECTION_STRING
        catalog: Audit
        extra-params: "Encrypt=False;"

    - name: Dotnet Restore 
      run: dotnet restore
      
    - name: Dotnet Build Audit.NET.sln
      run: dotnet build .\Audit.NET.sln --no-restore -c release

    - name: Run tests
      run: |
        dotnet test .\Audit.NET.sln --no-build -c release --filter "TestCategory!=Integration|TestCategory=SqlServer|TestCategory=Azure" --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=VSTest" "-m:1" --results-directory "./test/TestResult"

    - name: Generate Code Coverage Report
      run: |
        dotnet reportgenerator -reports:${{ github.workspace }}\test\TestResult\**\*.cobertura.xml -targetdir:"${{ github.workspace }}\Tests\coveragereport" -reporttypes:"MarkdownSummary;Html" "-assemblyfilters:+Audit.*;-*UnitTest;-Audit.NET.AmazonQLDB;-Audit.NET.DynamoDB;-Audit.NET.ElasticSearch;-Audit.NET.Kafka;-Audit.NET.MongoDB;-Audit.NET.MySql;-Audit.NET.PostgreSql;-Audit.NET.RavenDB;-Audit.NET.Redis"

    - name: SonarScanner End
      shell: pwsh
      run: |
        & dotnet sonarscanner end `
          /d:sonar.login="$Env:SONAR_TOKEN"

    - name: Upload Code Coverage Report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coveragereport
        path: ${{ github.workspace }}\Tests\coveragereport
    
    - name: Rename summary coverage file
      run: mv -force "${{ github.workspace }}\Tests\coveragereport\Summary.md" "${{ github.workspace }}\CODE_COVERAGE.md"

    - name: Commit CODE_COVERAGE.md
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Commit CODE_COVERAGE.md
        file_pattern: 'CODE_COVERAGE.md'        
