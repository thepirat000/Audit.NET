# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BUILD & RUN TESTS

on:
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]
  workflow_dispatch:
  
env:
  AUDIT_NET_AZUREDOCDBAUTHKEY: ${{ secrets.AUDIT_NET_AZUREDOCDBAUTHKEY }}
  AUDIT_NET_AZUREDOCDBURL: ${{ secrets.AUDIT_NET_AZUREDOCDBURL }}
  AUDIT_NET_AZURETABLECNNSTRING: ${{ secrets.AUDIT_NET_AZURETABLECNNSTRING }}
  AUDIT_NET_AZUREBLOBCNNSTRING: ${{ secrets.AUDIT_NET_AZUREBLOBCNNSTRING }}
  AUDIT_NET_AZUREBLOBACCOUNTNAME: ${{ secrets.AUDIT_NET_AZUREBLOBACCOUNTNAME }}
  AUDIT_NET_AZUREBLOBACCOUNTKEY: ${{ secrets.AUDIT_NET_AZUREBLOBACCOUNTKEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  FIRESTORE_CREDENTIALS: ${{ secrets.FIRESTORE_CREDENTIALS }}
  FIRESTORE_PROJECT_ID: audit-net
  ACCEPT_EULA: 'Y'

jobs:
  build_and_test:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
       
    - name: Extract version from Directory.Build.props
      shell: pwsh
      run: |
        $csprojPath = "Directory.Build.props"
        [xml]$csproj = Get-Content $csprojPath
        $version = $csproj.Project.PropertyGroup.Version
        "PROJECT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "PROJECT_VERSION=$version"

    # Google Cloud (Firestore)
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.FIRESTORE_CREDENTIALS }}

    # ImmuDB        
    - name: ImmuDB (Setup)
      run: |
        $version = 'v1.9.6'
        $url = "https://github.com/codenotary/immudb/releases/download/$version/immudb-$version-windows-amd64.exe"
        Invoke-WebRequest -Uri $url -OutFile 'immudb.exe'
        Start-Process -FilePath "immudb.exe" -ArgumentList "--pgsql-server-port 5438 -d" -NoNewWindow

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Dynamo DB
    - name: DynamoDB (Setup)
      run: |
        curl -L -o dynamodb_local_latest.zip https://s3.us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip
        powershell -Command "Expand-Archive -Path 'dynamodb_local_latest.zip' -DestinationPath 'dynamodb_local'"

    - name: DynamoDB (Init)
      run: |
        $args = '-Djava.library.path=./dynamodb_local/DynamoDBLocal_lib -jar ./dynamodb_local/DynamoDBLocal.jar -sharedDb -port 8000'
        Start-Process `
          -FilePath "java" `
          -ArgumentList $args `
          -NoNewWindow &
        Start-Sleep -Seconds 45
        netstat -a -n -o | findstr :8000

    # PostgreSQL
    - name: PostgreSQL (Setup) 
      id: postgres
      uses: ikalnytskyi/action-setup-postgres@v7
      with:
        postgres-version: '17'
        username:       'postgres'
        password:       'admin'
        database:       'postgres'
        port:           '5432'
        ssl:            'false'

    - name: PostgreSQL (Init)
      run: |
        psql ${{ steps.postgres.outputs.connection-uri }} -f "./test/Audit.PostgreSql.UnitTest/SqlScript.sql"

    # MySql
    - name: MySQL (Setup)
      uses: shogo82148/actions-setup-mysql@v1
      with:
        mysql-version: '9.0'
    
    - name: MySql (Init)
      run: |
        mysql -uroot -e "source ./test/Audit.MySql.UnitTest/MySqlScript.mysql"

    # Redis
    - name: Redis (Setup)
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip -OutFile redis.zip                               
        Expand-Archive redis.zip -DestinationPath redis

    - name: Redis (Init)
      shell: pwsh
      run: |
        $args = '--daemonize no'
        Start-Process `
          -FilePath "redis\redis-server.exe" `
          -ArgumentList $args `
          -NoNewWindow &
        Start-Sleep -Seconds 10
        netstat -a -n -o | findstr :6379

    # ElasticSearch
    - name: ElasticSearch (Setup)
      uses: ankane/setup-elasticsearch@v1
      with:
        elasticsearch-version: 9

    # OpenSearch
    - name: OpenSearch (Setup)
      uses: ankane/setup-opensearch@v1
      with:
        opensearch-version: 2.19.2  # Specify a version >= 2.4 for Windows compatibility
        config: |
            http.port: 9250    

    # Mongo DB
    - name: MongoDB (Setup)
      run: |
        Set-Service -Name 'MongoDB' -StartupType Automatic
        Start-Service -Name 'MongoDB'

    # RavenDB
    - name: RavenDB (Setup)
      run: choco install -y RavenDB --version=7.0.2

    - name: RavenDB (Init)
      shell: pwsh
      run: |
        $args = '--ServerUrl="http://localhost:8080" --RunInMemory -l'
        Start-Process `
          -FilePath "C:\RavenDB\Server\Raven.Server.exe" `
          -ArgumentList $args `
          -NoNewWindow &
        Start-Sleep -Seconds 10
        netstat -a -n -o | findstr :8080

    # # Cosmos 
    # - name: Cosmos DB (Setup)
    #   shell: pwsh
    #   run: |
    #     Write-Host "Launching Cosmos DB Emulator"
    #     Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
    #     Start-CosmosDbEmulator

    # Azurite
    - name: Azurite (Setup)
      id: azurite
      uses: potatoqualitee/azuright@v1
      with:
        version: latest

    # SQL Server
    - name: SQL Server (Setup)
      uses: Particular/install-sql-server-action@v1.0.0
      with:
        connection-string-env-var: SQL_SERVER_CONNECTION_STRING
        catalog: Audit
        extra-params: "Encrypt=False;"

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          2.1.x
          3.1.x
          6.0.x
          7.0.x 
          8.0.x
          9.0.x
                
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'      
      with:
        nuget-version: '6.x'      

    - name: Install dotnet Tools
      run: |
        dotnet new tool-manifest
        dotnet tool install dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-sonarscanner --version 10.1.2

    - name: SonarScanner Begin
      shell: pwsh
      run: |
        & dotnet sonarscanner begin `
          /o:"thepirat000" `
          /k:"Audit.NET" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.login="$Env:SONAR_TOKEN" `
          /d:sonar.cs.vstest.reportsPaths="/test/TestResult/**/*.trx" `
          /d:sonar.cs.opencover.reportsPaths="/test/TestResult/**/*.opencover.xml" `
          /d:sonar.exclusions="**/templates/**,**/docs/**,**/documents/**,**/tools/**,**/packages/**,**/Tests/**" `
          /d:sonar.coverage.exclusions="**/templates/**,**/Tests/**" `
          /v:"$Env:PROJECT_VERSION"

    - name: Dotnet Restore 
      run: dotnet restore
      
    - name: Dotnet Build Audit.NET.sln
      run: dotnet build .\Audit.NET.sln --no-restore -c release

    - name: Run tests
      run: |
        dotnet test .\Audit.NET.sln --no-build -c release `
          --filter "TestCategory!=Integration|TestCategory=AzureBlobs|TestCategory=AzureTables|TestCategory=RavenDB|TestCategory=Mongo|TestCategory=OpenSearch|TestCategory=Elasticsearch|TestCategory=Redis|TestCategory=MySql|TestCategory=SqlServer|TestCategory=EventLog|TestCategory=PostgreSQL|TestCategory=Dynamo|TestCategory=ImmuDB|TestCategory=Firestore" `
          --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=VSTest" "-m:1" --results-directory "./test/TestResult"

    - name: SonarScanner End
      shell: pwsh
      run: |
        & dotnet sonarscanner end `
          /d:sonar.login="$Env:SONAR_TOKEN"

    - name: Generate Code Coverage Report
      run: |
        dotnet reportgenerator -reports:${{ github.workspace }}\test\TestResult\**\*.cobertura.xml -targetdir:"${{ github.workspace }}\Tests\coveragereport" -reporttypes:"MarkdownSummary;Html" "-assemblyfilters:+Audit.*;-*UnitTest;-Audit.NET.Kafka;-Audit.NET.AzureCosmos;-Audit.NET.AzureEventHubs"

    - name: Upload Code Coverage Report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coveragereport
        path: ${{ github.workspace }}\Tests\coveragereport
    
    - name: Rename summary coverage file
      continue-on-error: true
      run: mv -force "${{ github.workspace }}\Tests\coveragereport\Summary.md" "${{ github.workspace }}\CODE_COVERAGE.md"

    - name: Commit CODE_COVERAGE.md
      continue-on-error: true
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Commit CODE_COVERAGE.md
        file_pattern: 'CODE_COVERAGE.md'        
