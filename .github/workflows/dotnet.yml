# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: BUILD & RUN TESTS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  
env:
  AUDIT_NET_AZUREDOCDBAUTHKEY: ${{ secrets.AUDIT_NET_AZUREDOCDBAUTHKEY }}
  AUDIT_NET_AZUREDOCDBURL: ${{ secrets.AUDIT_NET_AZUREDOCDBURL }}
  AUDIT_NET_AZURETABLECNNSTRING: ${{ secrets.AUDIT_NET_AZURETABLECNNSTRING }}
  AUDIT_NET_AZUREBLOBCNNSTRING: ${{ secrets.AUDIT_NET_AZUREBLOBCNNSTRING }}
  AUDIT_NET_AZUREBLOBACCOUNTNAME: ${{ secrets.AUDIT_NET_AZUREBLOBACCOUNTNAME }}
  AUDIT_NET_AZUREBLOBACCOUNTKEY: ${{ secrets.AUDIT_NET_AZUREBLOBACCOUNTKEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ACCEPT_EULA: 'Y'

jobs:
  build_and_test:
    runs-on: windows-latest

    steps:
       
    - name: Checkout
      uses: actions/checkout@v3

    # MySql
    - name: Set up MySQL
      uses: shogo82148/actions-setup-mysql@v1
      with:
        mysql-version: '9.0'
    
    - name: Create MySql objects
      run: |
        mysql -uroot -e "
          CREATE DATABASE test;
          CREATE USER 'admin'@'localhost' IDENTIFIED BY 'admin';
          GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;
          FLUSH PRIVILEGES;
          CREATE TABLE test.event (
            id INT unsigned NOT NULL AUTO_INCREMENT,
            inserted_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_updated_date DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            data JSON NOT NULL,
            user VARCHAR(25) NULL,
            PRIMARY KEY (id)
          );"

    # Redis
    - name: Download Redis for Windows
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip -OutFile redis.zip                               
        Expand-Archive redis.zip -DestinationPath redis

    - name: Start Redis
      shell: pwsh
      run: |
        $args = '--daemonize no'
        Start-Process `
          -FilePath "redis\redis-server.exe" `
          -ArgumentList $args `
          -NoNewWindow &
        Start-Sleep -Seconds 10
        netstat -a -n -o | findstr :6379

    # ElasticSearch
    - name: Set up Elasticsearch
      uses: ankane/setup-elasticsearch@v1
      with:
        elasticsearch-version: 9

    # OpenSearch
    - name: Set up OpenSearch
      uses: ankane/setup-opensearch@v1
      with:
        opensearch-version: 2.19.2  # Specify a version >= 2.4 for Windows compatibility
        config: |
            http.port: 9250    

    # Mongo DB
    - name: Start MongoDB service
      run: |
        Set-Service -Name 'MongoDB' -StartupType Automatic
        Start-Service -Name 'MongoDB'

    # RavenDB
    - name: Install RavenDB 
      run: choco install -y RavenDB --version=7.0.2

    - name: Start RavenDB on port 8080
      shell: pwsh
      run: |
        $args = '--ServerUrl="http://localhost:8080" --RunInMemory -l'
        Start-Process `
          -FilePath "C:\RavenDB\Server\Raven.Server.exe" `
          -ArgumentList $args `
          -NoNewWindow &
        Start-Sleep -Seconds 10
        netstat -a -n -o | findstr :8080

    # # Cosmos 
    # - name: Start Azure Cosmos DB emulator
    #   shell: pwsh
    #   run: |
    #     Write-Host "Launching Cosmos DB Emulator"
    #     Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
    #     Start-CosmosDbEmulator

    # Azurite
    - name: Start Azurite
      id: azurite
      uses: potatoqualitee/azuright@v1
      with:
        version: latest

    # SQL Server
    - name: Install SQL Server
      uses: Particular/install-sql-server-action@v1.0.0
      with:
        connection-string-env-var: SQL_SERVER_CONNECTION_STRING
        catalog: Audit
        extra-params: "Encrypt=False;"

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          2.1.x
          3.1.x
          6.0.x
          7.0.x 
          8.0.x
          9.0.x
                
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'      
      with:
        nuget-version: '6.x'      

    - name: Install Required Tools
      run: |
        dotnet new tool-manifest
        dotnet tool install dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-sonarscanner --version 10.1.2

    - name: SonarScanner Begin
      shell: pwsh
      run: |
        & dotnet sonarscanner begin `
          /o:"thepirat000" `
          /k:"Audit.NET" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.login="$Env:SONAR_TOKEN" `
          /d:sonar.cs.vstest.reportsPaths="/test/TestResult/**/*.trx" `
          /d:sonar.cs.opencover.reportsPaths="/test/TestResult/**/*.opencover.xml" `
          /d:sonar.exclusions="**/templates/**,**/docs/**,**/documents/**,**/tools/**,**/packages/**,**/Tests/**" `
          /d:sonar.coverage.exclusions="**/templates/**,**/Tests/**"

    - name: Dotnet Restore 
      run: dotnet restore
      
    - name: Dotnet Build Audit.NET.sln
      run: dotnet build .\Audit.NET.sln --no-restore -c release

    - name: Run tests
      run: |
        dotnet test .\Audit.NET.sln --no-build -c release --filter "TestCategory!=Integration|TestCategory=AzureBlobs|TestCategory=AzureTables|TestCategory=RavenDB|TestCategory=Mongo|TestCategory=OpenSearch|TestCategory=Elasticsearch|TestCategory=Redis|TestCategory=MySql" --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=VSTest" "-m:1" --results-directory "./test/TestResult"

    - name: Generate Code Coverage Report
      run: |
        dotnet reportgenerator -reports:${{ github.workspace }}\test\TestResult\**\*.cobertura.xml -targetdir:"${{ github.workspace }}\Tests\coveragereport" -reporttypes:"MarkdownSummary;Html" "-assemblyfilters:+Audit.*;-*UnitTest;-Audit.NET.AmazonQLDB;-Audit.NET.DynamoDB;-Audit.NET.ElasticSearch;-Audit.NET.Kafka;-Audit.NET.MongoDB;-Audit.NET.MySql;-Audit.NET.PostgreSql;-Audit.NET.RavenDB;-Audit.NET.Redis"

    - name: SonarScanner End
      shell: pwsh
      run: |
        & dotnet sonarscanner end `
          /d:sonar.login="$Env:SONAR_TOKEN"

    - name: Upload Code Coverage Report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coveragereport
        path: ${{ github.workspace }}\Tests\coveragereport
    
    - name: Rename summary coverage file
      run: mv -force "${{ github.workspace }}\Tests\coveragereport\Summary.md" "${{ github.workspace }}\CODE_COVERAGE.md"

    - name: Commit CODE_COVERAGE.md
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Commit CODE_COVERAGE.md
        file_pattern: 'CODE_COVERAGE.md'        
