using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Audit.Core;
using Audit.Elasticsearch.Providers;
using Audit.IntegrationTest;

using Elastic.Clients.Elasticsearch;
using Elastic.Clients.Elasticsearch.IndexManagement;

using NUnit.Framework;

namespace Audit.Elasticsearch.UnitTest
{
    public class ElasticsearchTests
    {
        [SetUp]
        public void Setup()
        {
            Audit.Core.Configuration.Reset();
        }

        [Test]
        public void Test_ElasticSearchDataProvider_FluentApi()
        {
            var x = new Elasticsearch.Providers.ElasticsearchDataProvider(_ => _
                .Client(new ElasticsearchClientSettings(new Uri("http://server/")))
                .Id(ev => "id")
                .Index("ix"));

            Assert.That((x.Settings.NodePool.Nodes.First().Uri.ToString()), Is.EqualTo("http://server/"));
            Assert.That(x.IdBuilder.Invoke(null).Equals(new Id("id")), Is.True);
            Assert.That(x.Index.GetDefault(), Is.EqualTo((IndexName)"ix"));
        }
        
        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public void Test_Elasticsearch_HappyPath()
        {
            var dataProvider = new ElasticsearchDataProvider(new ElasticsearchClient(new Uri(AzureSettings.ElasticSearchUrl)));
            var indexName = "auditevent_order";
            
            var guids = new List<string>();
            dataProvider.Index = (IndexName)indexName;
            dataProvider.IdBuilder = ev => { var g = Guid.NewGuid().ToString(); guids.Add(g); return g; };

            Audit.Core.Configuration.Setup()
                .UseCustomProvider(dataProvider)
                .WithCreationPolicy(EventCreationPolicy.InsertOnStartReplaceOnEnd)
                .ResetActions();

            var order = new Order()
            {
                Id = 1,
                Status = "Created"
            };
            
            using (var scope = new AuditScopeFactory().Create("eventType", () => order, new { MyCustomField = "value" }, null, null))
            {
                order.Status = "Updated";
            }

            var elasticClient = dataProvider.GetClient();
            elasticClient.Indices.Refresh(indexName);

            var evLoad = dataProvider.GetEvent(new ElasticsearchAuditEventId() { Id = guids[0], Index = indexName });
            
            Assert.That(evLoad, Is.Not.Null);
            Assert.That(guids.Count, Is.EqualTo(1));
            Assert.That(evLoad.CustomFields["MyCustomField"].ToString(), Is.EqualTo("value"));
        }

        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public async Task Test_Elasticsearch_HappyPath_Async()
        {
            var dataProvider = new ElasticsearchDataProvider(c => c.Client(new ElasticsearchClientSettings(new Uri(AzureSettings.ElasticSearchUrl))));
            var indexName = "auditevent_order";

            var guids = new List<string>();
            dataProvider.Index = (IndexName)indexName;
            dataProvider.IdBuilder = ev => { var g = Guid.NewGuid().ToString(); guids.Add(g); return g; };

            Audit.Core.Configuration.Setup()
                .UseCustomProvider(dataProvider)
                .WithCreationPolicy(Core.EventCreationPolicy.InsertOnStartReplaceOnEnd)
                .ResetActions();

            var order = new Order()
            {
                Id = 1,
                Status = "Created"
            };

            using (var scope = await new AuditScopeFactory().CreateAsync("eventType", () => order, new { MyCustomField = "value" }, null, null))
            {
                order.Status = "Updated";
            }

            var elasticClient = dataProvider.GetClient();
            await elasticClient.Indices.RefreshAsync(indexName);

            var evLoad = await dataProvider.GetEventAsync(new ElasticsearchAuditEventId() { Id = guids[0], Index = indexName });

            Assert.That(evLoad, Is.Not.Null);
            Assert.That(guids.Count, Is.EqualTo(1));
            Assert.That(evLoad.CustomFields["MyCustomField"].ToString(), Is.EqualTo("value"));
        }

        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public void Test_Elasticsearch_AutoGeneratedId()
        {
            var dataProvider = new ElasticsearchDataProvider(c => c.Client(new ElasticsearchClient(new ElasticsearchClientSettings(new Uri(AzureSettings.ElasticSearchUrl)))));
            var indexName = "auto_" + new Random().Next(10000, 99999);

            dataProvider.Index = (IndexName)indexName;
            dataProvider.IdBuilder = ev => null;

            Audit.Core.Configuration.Setup()
                .UseCustomProvider(dataProvider)
                .WithCreationPolicy(Core.EventCreationPolicy.InsertOnStartReplaceOnEnd)
                .ResetActions();

            var sb = "init";


            using (var scope = new AuditScopeFactory().Create("eventType", () => sb, new { MyCustomField = "value" }, null, null))
            {
                sb += "-end";
            }

            var elasticClient = dataProvider.GetClient();
            elasticClient.Indices.Refresh(indexName);

            var results = elasticClient.Search<AuditEvent>(new SearchRequest(indexName));
            var evResult = results.Documents.FirstOrDefault();
            if (evResult != null)
            {
                elasticClient.Delete(new DeleteRequest(results.Hits.First().Index, results.Hits.First().Id));
            }

            Assert.That(evResult, Is.Not.Null);
            Assert.That(results.Documents.Count, Is.EqualTo(1));
            Assert.That(evResult.Target.Old.ToString(), Is.EqualTo("init"));
            Assert.That(evResult.Target.New.ToString(), Is.EqualTo("init-end"));
            Assert.That(evResult.CustomFields["MyCustomField"]?.ToString(), Is.EqualTo("value"));
        }

        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public async Task Test_Elasticsearch_AutoGeneratedId_Async()
        {
            var dataProvider = new ElasticsearchDataProvider(c => c.Client(new Uri(AzureSettings.ElasticSearchUrl)));
            var indexName = "auto_" + new Random().Next(10000, 99999);

            dataProvider.Index = (IndexName)indexName;
            dataProvider.IdBuilder = ev => null;

            Audit.Core.Configuration.Setup()
                .UseCustomProvider(dataProvider)
                .WithCreationPolicy(Core.EventCreationPolicy.InsertOnStartReplaceOnEnd)
                .ResetActions();

            var sb = "init";


            using (var scope = await new AuditScopeFactory().CreateAsync("eventType", () => sb, new { MyCustomField = "value" }, null, null))
            {
                sb += "-end";
            }

            var elasticClient = dataProvider.GetClient();
            await elasticClient.Indices.RefreshAsync(indexName);

            var results = await elasticClient.SearchAsync<Core.AuditEvent>(new SearchRequest(indexName));
            var evResult = results.Documents.FirstOrDefault();
            if (evResult != null)
            {
                await elasticClient.DeleteAsync(new DeleteRequest(results.Hits.First().Index, results.Hits.First().Id));
            }

            Assert.That(evResult, Is.Not.Null);
            Assert.That(results.Documents.Count, Is.EqualTo(1));
            Assert.That(evResult.Target.Old.ToString(), Is.EqualTo("init"));
            Assert.That(evResult.Target.New.ToString(), Is.EqualTo("init-end"));
            Assert.That(evResult.CustomFields["MyCustomField"]?.ToString(), Is.EqualTo("value"));
        }

        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public void Test_Elasticsearch_Polymorphic_Serialization()
        {
            var indexName = "auto_" + new Random().Next(10000, 99999);
            var dp = new ElasticsearchDataProvider(c => c.Client(new Uri(AzureSettings.ElasticSearchUrl)).Index(indexName));

            Audit.Core.Configuration.Setup().UseNullProvider();

            var ev = new CustomAuditEvent()
            {
                CustomProperty = "test"
            };

            var scope = AuditScope.Create(new AuditScopeOptions() { AuditEvent = ev });
            scope.SetCustomField("CustomField", "value");
            scope.Discard();

            var id = dp.InsertEvent(ev) as ElasticsearchAuditEventId;

            var result = dp.GetEvent<CustomAuditEvent>(id);

            var elasticClient = dp.GetClient();
            elasticClient.Indices.Delete(new DeleteIndexRequest(indexName));

            Assert.That(result, Is.Not.Null);
            Assert.That(result.CustomFields.Count, Is.EqualTo(1));
            Assert.That(result.CustomFields["CustomField"].ToString(), Is.EqualTo("value"));
            Assert.That(result.CustomProperty, Is.EqualTo("test"));
        }

        [Test]
        [Category("Integration")]
        [Category("Elasticsearch")]
        public async Task Test_Elasticsearch_Polymorphic_SerializationAsync()
        {
            var indexName = "auto_" + new Random().Next(10000, 99999);
            var dp = new ElasticsearchDataProvider(c => c.Client(new Uri(AzureSettings.ElasticSearchUrl)).Index(indexName));

            Audit.Core.Configuration.Setup().UseNullProvider();

            var ev = new CustomAuditEvent()
            {
                CustomProperty = "test"
            };

            var scope = await AuditScope.CreateAsync(new AuditScopeOptions() { AuditEvent = ev });
            scope.SetCustomField("CustomField", "value");
            scope.Discard();

            var id = (await dp.InsertEventAsync(ev)) as ElasticsearchAuditEventId;
            ev.CustomProperty = "updated";
            await dp.ReplaceEventAsync(id, ev);

            var result = await dp.GetEventAsync<CustomAuditEvent>(id);

            var elasticClient = dp.GetClient();
            await elasticClient.Indices.DeleteAsync(new DeleteIndexRequest(indexName));

            Assert.That(result, Is.Not.Null);
            Assert.That(result.CustomFields.Count, Is.EqualTo(1));
            Assert.That(result.CustomFields["CustomField"].ToString(), Is.EqualTo("value"));
            Assert.That(result.CustomProperty, Is.EqualTo("updated"));
        }
    }

    public class CustomAuditEvent : AuditEvent
    {
        public string CustomProperty { get; set; }
    }

    public class Order
    {
        public virtual long Id { get; set; }
        public virtual string Number { get; set; }
        public virtual string Status { get; set; }
    }
}
